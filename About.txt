
To a T – Elliot Goldman

	Computers, while interesting, useful, and amazing tools, also introduce a coldness, distraction, and inorganic element to writing.  The writing process now involves considerations of font, line spacing, bold, italic, underline, indents,  and formatting. The words are still there, but the focus on their content and creation is sullied by the process a user has to go through in order to bring the document to fruition. Lost are the tactilities of a typewriter or the simplicity of a piece of paper. A user spends more time checking the margins, double spacing, and changing the font then they do actually writing. “To a T” aims to bring a paired down writing experience with the features of technology that you actually need to write, the simplicity of paper on the complexity of a computer.
	To a T started with my collection of old typewriters. I love sliding in a new piece of paper and typing away. The weight of the keys, the click as they hit the white paper, the analog bell as the end of the line is reached. I wanted to create a program that would bring that experience to the computer. Fake key-clicks and corny graphics come to mind, but I was more interested in what aspect of the typewriter it was that I was yearning to experience on the computer.  It wasn't so much about the tactility of it all (though that is definitely something that is missed), pressing on a laptop's keyboard keys at least provides a little bit of feedback and a click, but the simplicity. 
	This lead me to start with a simple white rectangle. Paper has been around for centuries, and mimicking the form of that was the first step for me towards creating To a T. After this was decided everything else fell into place. A white rectangle doesn't have a title bar, so that was removed. A white rectangle doesn't have buttons and controls, so those were removed. After this was just the necessity of use. A bottom bar was added so that the window could be moved around, minimized, maximized, or closed. The features that weren't a necessity were stripped away, while the features that were needed for operation were added in a way that would not detract from the original idea and form. 
	During this process I was continually adding the aspects of a computer program To a T needed. After all, if a user wanted to use a piece of a paper, they could literally just use a paper. Autosave was one of the biggest features I thought necessary for extending the functionality of paper. Being able to go back to the state of a paper hours or even days earlier is something rarely found in word editors and never on paper. A computer's ability to process, save, and condense in the background is what makes its use worthwhile. I wanted to harness these unobtrusive background features. This lead me to adding a character and word count, and save indicator to the bottom bar. If the user adds information and it hasn't been saved or autosaved, the indicator remains red rather than green. The paper metaphor was still present, and a quick flick of a mouse could produce all of the information and technology the user could need.
	Not wanting to overcrowd the bottom information bar, I decided on a format of key commands. Key commands are something every computer user is well versed with. People click ⌘C (or ctrl) to copy without even thinking. To a T works with the same key commands everyone knows and expects. ⌘C, ⌘V, ⌘X to copy, paste, and cut; ⌘Z, ⌘Y to undo and redo; ⌘S, ⌘ShiftS, ⌘O to save, save as, and open; and ⌘P to print. The final key command in To a T is the one unusual one: ⌘B, hide or unhide the transparent background overlay.
	The transparent background overlay was a late and problematic, but ultimately critical addition to To a T. So much of a user's experience is the environment that they're in. I didn't want to disregard the distractions of the rest of the computer. Keeping with the paper, white rectangle mentality, a paper is nearly always on a table. When in a typewriter, a paper's background is whatever is behind it. Computers unavoidably block what's behind them, an impenetrable wall, and their only background is either the desktop or whatever other windows are open. The transparent background overlay aims to remedy this by providing a scrim to focus the users attention on their writing. Having a solid background was considered, but would simply mimic the effects of a fullscreen and wouldn't allow the user to have an exposure to what was happening around the window they're currently working on while on their computer. 
	The transparent background's problems were indicative of the troubles I faced while making To a T. The biggest problem was integrating the available features into one package that worked seamlessly together. The background shouldn't effect the window and should be, in the background. Closing the window without saving should prompt the user. Saving a duplicate filename should prompt the user and behave accordingly. As more features were added, the more difficult it became because they needed to work together. Methods were changed to have a return value and booleans were added to keep track of the window's many different states. Integrating all of features and anticipating all possible responses and uses was the most difficult part of the development process.  
	To organize the code behind the program I broke it up into two main classes, TextUI and FileManager. TextUI displays the program and handles the user's interaction with it. It has a number of listeners and key bindings that deal with all of the possible actions of a user. FileManager deals with the files behind the document and a user's interactions with those files. For nearly all of FileManagers methods, the textArea object (the JTextArea component where the user types) is passed in so that the method can access the string that the user has typed into the window. To a T has a custom status indicator and custom buttons so a folder called “Art Files” is required with all of the pngs that need to be loaded. Secondly a folder called “Auto Saves” is automatically created by the program itself (if it doesn't already exist) so that To a T can put a folder with the date inside it and auto save a file with the time. This allows auto saves to be searched later by date and time by the user.
	After all was said and done, I was left with a finished text editor that mimics the simplicity of paper. A user opens the application and is left with a simple white rectangle to start typing in. If they need to save, open, or print, they use the key commands they're already familiar with. If they need to check how many characters or words are in the document, they bring their mouse to the bottom of the window. From their they can drag the window around, minimize, maximize, or close. The instructions of use are concise because usage should be intuitive. To a T takes the simplicity of a cup of tea and boils it down to a simple writing experience that's focused only on writing. It gives the user an environment to steep their writing in without the normal distraction of word processors. 
